# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      
      # Fasse die index.php und die Dateien in html zu einer ZIP-Datei zusammen, die in Elastic Beanstalk hochgeladen werden kann
      - name: Erzeuge das ZIP Archiv für AWS Elastic Beanstalk
        run: sh scripts/erzeuge-zip-archiv.sh

      # Erzeugte Hallo-Welt.zip hochladen
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Hallo-Welt-Archiv
          path: Artefakt/Hallo-Welt.zip

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  deploy:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Configuring the AWS credentials
      # You may pin to the exact commit or the version.
      # uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          # AWS Access Key ID. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
          aws-access-key-id: ${{ secrets.aws_accesskey }}
          # AWS Secret Access Key. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
          aws-secret-access-key: ${{ secrets.aws_secret_accesskey }}
          # AWS Session Token
          ## aws-session-token: # optional
          # AWS Region, e.g. us-east-2
          aws-region: eu-central-1
          # Whether to set the AWS account ID for these credentials as a secret value, so that it is masked in logs. Valid values are 'true' and 'false'. Defaults to true
          mask-aws-account-id: true
          # Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials
          ##role-to-assume: # optional
          # Use the web identity token file from the provided file system path in order to assume an IAM role using a web identity. E.g., from within an Amazon EKS worker node
          ##web-identity-token-file: # optional
          # Role duration in seconds (default: 6 hours)
          ##role-duration-seconds: # optional
          # Role session name (default: GitHubActions)
          ##role-session-name: # optional
          # The external ID of the role to assume
          ##role-external-id: # optional
          # Skip session tagging during role assumption
          ##role-skip-session-tagging: # optional

      # Erzeugte Hallo-Welt.zip herunterladen
      - name: Artefakt herunterladen
        uses: actions/download-artifact@v2
        with:
          name: Hallo-Welt-Archiv
          path: Artefakt

      - name: Überprüfen
        run: ls -l Artefakt

      # Abfrage der Elastic Beanstalk Applikationen mit Filter nach "Hallo-Welt" im Namen
      - name: EBSAppAbfrage
        id: Abfrage
        run:
          #bash scripts/EBSAppAbfrage.sh
          Ergebnis=$(sh scripts/EBSAppAbfrage.sh);
          echo '::set-output name=Resultat::Ergebnis';
          echo ">>> ${{steps.Abfrage.outputs.Resultat}}";
          printf %s "--> ${{steps.Abfrage.outputs.Resultat}}"

      # Anlage der Elastic Beanstalk - Umgebung falls nicht vorhanden
      - name: Applikation Hallo-Welt Anlage
        if: steps.Abfrage.outputs.Resultat == 'fehlt'
        run:
          echo "Na dann mal los!"
          
      # Anlage einer neuen version der Hallo-Welt App
      - name: Applikation Hallo-Welt neue Version
        if: steps.Abfrage.outputs.Resultat == 'geunden'
        run:
          echo "Alles neu macht der Meu"
            
